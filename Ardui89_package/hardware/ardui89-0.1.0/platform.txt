name=Ardui89
version=0.0.1

# SDCC/SDCPP compile variables
# ---------------------

compiler.warning_flags=
compiler.warning_flags.none=
compiler.warning_flags.default=
compiler.warning_flags.more=
compiler.warning_flags.all=

# Default "compiler.path" is correct, change only if you want to override the initial value
#compiler.avr.path={runtime.tools.avr-gcc.path}/bin/
compiler.path={runtime.tools.sdcc.path}/bin/
#compiler.avr.c.cmd=avr-gcc
compiler.c.cmd=fake
compiler.c.flags={compiler.warning_flags} -c -mmcs51 --std-c99 --model-small --opt-code-size --disable-warning 110 --disable-warning 283
compiler.c.elf.flags={compiler.warning_flags}
#compiler.avr.c.elf.cmd=avr-gcc
compiler.c.elf.cmd=fake_ld
compiler.S.flags=
#compiler.avr.cpp.cmd=avr-g++
compiler.cpp.cmd=fake_cpp
compiler.cpp.flags={compiler.warning_flags} -c -mmcs51 --std-c99 --model-small --opt-code-size --disable-warning 110 --disable-warning 283
#compiler.avr.ar.cmd=avr-gcc-ar
compiler.ar.cmd=fake_sdar
#compiler.avr.ar.flags=rcs
compiler.ar.flags=rcs
#{compiler.warning_flags} -c -mmcs51 --std-c99 --model-small --opt-code-size --disable-warning 110 --disable-warning 283
#compiler.avr.objcopy.cmd=avr-objcopy
compiler.objcopy.cmd=fake_objcopy
#compiler.avr.objcopy.eep.flags=-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0
compiler.objcopy.eep.flags=
compiler.elf2hex.flags=-O ihex -R .eeprom
#compiler.avr.elf2hex.cmd=avr-objcopy
compiler.elf2hex.cmd=fake
compiler.ldflags=-mmcs51 --std-c99 --model-small --opt-code-size --disable-warning 110 --disable-warning 283
compiler.libraries.ldflags=
#compiler.avr.size.cmd=avr-size
compiler.size.cmd=fake_size

# This can be overridden in boards.txt
build.extra_flags=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.elf2hex.extra_flags=

# SDCC (8051) compile patterns
# --------------------

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -m{build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -m{build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.S.flags} -m{build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
# archive_file_path is needed for backwards compatibility with IDE 1.6.5 or older, IDE 1.6.6 or newer overrides this value
archive_file_path={build.path}/{archive_file}
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} -o "{archive_file_path}.lib" "{object_file}"
#recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" {compiler.c.elf.flags} -m{build.mcu} {compiler.c.elf.extra_flags} {compiler.ldflags} -o "{build.path}/{build.project_name}.ihx" {object_files} {compiler.libraries.ldflags} "{build.path}/{archive_file}"  "-L{build.path}" 

## Create output files (.eep and .hex)
recipe.objcopy.eep.pattern="{compiler.path}{compiler.objcopy.cmd}" "{build.path}/{build.project_name}.ihx" "{build.path}/{build.project_name}.hex"
#recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Save hex
recipe.output.tmp_file={build.project_name}.hex
recipe.output.save_file={build.project_name}.{build.variant}.hex

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" "{build.path}/{build.project_name}.hex"
recipe.size.regex=^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*
recipe.size.regex.eeprom=^(?:\.eeprom)\s+([0-9]+).*

## Preprocessor
preproc.includes.flags=-E -mmcs51 --std-c99 --model-small --opt-code-size --disable-warning 110 --disable-warning 110 --disable-warning 283 
recipe.preproc.includes="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {preproc.includes.flags} -m{build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}"

preproc.macros.flags=-E -mmcs51 --std-c99 --model-small --opt-code-size --disable-warning 110 --disable-warning 283 
recipe.avr.preproc.macros="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} {preproc.macros.flags} -m{build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{preprocessed_file_path}"
recipe.preproc.macros="{compiler.path}fake_cpp" {compiler.cpp.flags} {preproc.macros.flags} -m{build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{preprocessed_file_path}"

# Required discoveries and monitors
# ---------------------------------
pluggable_discovery.required.0=builtin:serial-discovery
pluggable_discovery.required.1=builtin:mdns-discovery
pluggable_monitor.required.serial=builtin:serial-monitor

# STC Uploader/Programmers tools
# ------------------------------

tools.stcflashisp.path={runtime.tools.stcflashisp.path}
tools.stcflashisp.cmd.path={runtime.tools.python3.path}/python3
tools.stcflashisp.config.path={path}/etc/stcflashisp.conf

tools.stcflashisp.upload.params.verbose=
tools.stcflashisp.upload.params.quiet=
# tools.stcflashisp.upload.verify is needed for backwards compatibility with IDE 1.6.8 or older, IDE 1.6.9 or newer overrides this value
tools.stcflashisp.upload.verify=
tools.stcflashisp.upload.params.noverify=
#tools.stcflashisp.upload.pattern="{cmd.path}" "-C{config.path}" {upload.verbose} {upload.verify} -p{build.mcu} -c{upload.protocol} "-P{serial.port}" -b{upload.speed} -D "-Uflash:w:{build.path}/{build.project_name}.hex:i"
# STC FLASH ISP HERE
tools.stcflashisp.upload.pattern="{cmd.path}"  "{path}/bin/stcflashisp.py" -r {upload.protocol} -p {serial.port} -a {upload.speed} "{build.path}/{build.project_name}.hex"


tools.stcflashisp.program.params.verbose=-v
tools.stcflashisp.program.params.quiet=-q
# tools.stcflashisp.program.verify is needed for backwards compatibility with IDE 1.6.8 or older, IDE 1.6.9 or newer overrides this value
tools.stcflashisp.program.verify=
tools.stcflashisp.program.params.noverify=-V
tools.stcflashisp.program.pattern="{cmd.path1}" "-C{config.path}" {program.verbose} {program.verify} -p{build.mcu} -c{protocol} {program.extra_params} "-Uflash:w:{build.path}/{build.project_name}.hex:i"

tools.stcflashisp.erase.params.verbose=-v
tools.stcflashisp.erase.params.quiet=-q
tools.stcflashisp.erase.pattern="{cmd.path2}" "-C{config.path}" {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m

tools.stcflashisp.bootloader.params.verbose=-v
tools.stcflashisp.bootloader.params.quiet=-q -q
tools.stcflashisp.bootloader.pattern="{cmd.path3}" "-C{config.path}" {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} "-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i" -Ulock:w:{bootloader.lock_bits}:m

tools.stcflashisp_remote.upload.pattern=/usr/bin/run-stcflashisp /tmp/sketch.hex {upload.verbose} -p{build.mcu}

# The following rule is deprecated by pluggable discovery.
# We keep it to avoid breaking compatibility with the Arduino Java IDE.
tools.stcflashisp.network_cmd={runtime.tools.arduinoOTA.path}/bin/arduinoOTA
tools.stcflashisp.upload.network_pattern="{network_cmd}" -address {serial.port} -port {upload.network.port} -sketch "{build.path}/{build.project_name}.hex" -upload {upload.network.endpoint_upload} -sync {upload.network.endpoint_sync} -reset {upload.network.endpoint_reset} -sync_exp {upload.network.sync_return}

# arduino ota
tools.arduino_ota.cmd={runtime.tools.arduinoOTA.path}/bin/arduinoOTA
tools.arduino_ota.upload.pattern="{cmd}" -address {upload.port.address} -port {upload.port.properties.port} -sketch "{build.path}/{build.project_name}.hex" -upload {upload.port.properties.endpoint_upload} -sync {upload.port.properties.endpoint_sync} -reset {upload.port.properties.endpoint_reset} -sync_exp {upload.port.properties.sync_return}

# USB Default Flags
# Default blank usb manufacturer will be filled in at compile time
# - from numeric vendor ID, set to Unknown otherwise
build.usb_manufacturer="Unknown"
build.usb_flags=-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'
