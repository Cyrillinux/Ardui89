#include "SoftI2cMasterUni.h"
#include "SoftSSD1306Uni.h"

// Police 8x8 en PROGMEM (ASCII 32 à 127 uniquement)
PROGMEM const unsigned char font8x8[96][8] = {
    // Caractère 0x00 (Espace)
    {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
    // Caractère 0x01 (!)
    {0x00, 0x00, 0x00, 0x00, 0x4f, 0x4f, 0x00, 0x00},
    // Caractère 0x02 (")
    {0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x07, 0x07},
    // Caractère 0x03 (#)
    {0x00, 0x14, 0x7f, 0x7f, 0x14, 0x14, 0x7f, 0x7f},
    // Caractère 0x04 ($)
    {0x00, 0x00, 0x24, 0x2e, 0x6b, 0x6b, 0x3a, 0x12},
    // Caractère 0x05 (%)
    {0x00, 0x00, 0x63, 0x33, 0x18, 0x0c, 0x66, 0x63},
    // Caractère 0x06 (&)
    {0x00, 0x00, 0x32, 0x7f, 0x4d, 0x4d, 0x77, 0x72},
    // Caractère 0x07 (backtick flipped)
    {0x00, 0x00, 0x00, 0x00, 0x04, 0x06, 0x03, 0x01},
    // Caractère 0x08 "("
    {0x00, 0x00, 0x00, 0x1c, 0x3e, 0x63, 0x41, 0x00},
    // Caractère 0x09 ")"
    {0x00, 0x00, 0x00, 0x41, 0x63, 0x3e, 0x1c, 0x00},
    // Caractère 0x0A (*)
    {0x00, 0x08, 0x2a, 0x3e, 0x1c, 0x1c, 0x3e, 0x2a},
    // Caractère 0x0B (+)
    {0x00, 0x00, 0x08, 0x08, 0x3e, 0x3e, 0x08, 0x08},
    // Caractère 0x0C (,)
    {0x00, 0x00, 0x00, 0x80, 0xe0, 0x60, 0x00, 0x00},
    // Caractère 0x0D (-)
    {0x00, 0x00, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08},
    // Caractère 0x0E (.)
    {0x00, 0x00, 0x00, 0x00, 0x60, 0x60, 0x00, 0x00},
    // Caractère 0x0F (/)
    {0x00, 0x00, 0x40, 0x60, 0x30, 0x18, 0x0c, 0x06},
    
    // Chiffres 0-9
    // 0
    {0x00, 0x00, 0x3e, 0x7f, 0x49, 0x45, 0x7f, 0x3e},
    // 1
    {0x00, 0x00, 0x40, 0x44, 0x7f, 0x7f, 0x40, 0x40},
    // 2
    {0x00, 0x00, 0x62, 0x73, 0x51, 0x49, 0x4f, 0x46},
    // 3
    {0x00, 0x00, 0x22, 0x63, 0x49, 0x49, 0x7f, 0x36},
    // 4
    {0x00, 0x00, 0x18, 0x18, 0x14, 0x16, 0x7f, 0x7f},
    // 5
    {0x00, 0x00, 0x27, 0x67, 0x45, 0x45, 0x7d, 0x39},
    // 6
    {0x00, 0x00, 0x3e, 0x7f, 0x49, 0x49, 0x7b, 0x32},
    // 7
    {0x00, 0x00, 0x03, 0x03, 0x79, 0x7d, 0x07, 0x03},
    // 8
    {0x00, 0x00, 0x36, 0x7f, 0x49, 0x49, 0x7f, 0x36},
    // 9
    {0x00, 0x00, 0x26, 0x6f, 0x49, 0x49, 0x7f, 0x3e},
    
    // Symboles
    // :
    {0x00, 0x00, 0x00, 0x00, 0x24, 0x24, 0x00, 0x00},
    // ;
    {0x00, 0x00, 0x00, 0x80, 0xe4, 0x64, 0x00, 0x00},
    // <
    {0x00, 0x00, 0x08, 0x1c, 0x36, 0x63, 0x41, 0x41},
    // =
    {0x00, 0x00, 0x14, 0x14, 0x14, 0x14, 0x14, 0x14},
    // >
    {0x00, 0x00, 0x41, 0x41, 0x63, 0x36, 0x1c, 0x08},
    // ?
    {0x00, 0x00, 0x02, 0x03, 0x51, 0x59, 0x0f, 0x06},
    // @
    {0x00, 0x00, 0x3e, 0x7f, 0x41, 0x4d, 0x4f, 0x2e},
    
    // Lettres majuscules A-Z
    // A
    {0x00, 0x00, 0x7c, 0x7e, 0x0b, 0x0b, 0x7e, 0x7c},
    // B
    {0x00, 0x00, 0x7f, 0x7f, 0x49, 0x49, 0x7f, 0x36},
    // C
    {0x00, 0x00, 0x3e, 0x7f, 0x41, 0x41, 0x63, 0x22},
    // D
    {0x00, 0x00, 0x7f, 0x7f, 0x41, 0x63, 0x3e, 0x1c},
    // E
    {0x00, 0x00, 0x7f, 0x7f, 0x49, 0x49, 0x41, 0x41},
    // F
    {0x00, 0x00, 0x7f, 0x7f, 0x09, 0x09, 0x01, 0x01},
    // G
    {0x00, 0x00, 0x3e, 0x7f, 0x41, 0x49, 0x7b, 0x3a},
    // H
    {0x00, 0x00, 0x7f, 0x7f, 0x08, 0x08, 0x7f, 0x7f},
    // I
    {0x00, 0x00, 0x00, 0x41, 0x7f, 0x7f, 0x41, 0x00},
    // J
    {0x00, 0x00, 0x20, 0x60, 0x41, 0x7f, 0x3f, 0x01},
    // K
    {0x00, 0x00, 0x7f, 0x7f, 0x1c, 0x36, 0x63, 0x41},
    // L
    {0x00, 0x00, 0x7f, 0x7f, 0x40, 0x40, 0x40, 0x40},
    // M
    {0x00, 0x00, 0x7f, 0x7f, 0x06, 0x0c, 0x06, 0x7f},
    // N
    {0x00, 0x00, 0x7f, 0x7f, 0x0e, 0x1c, 0x7f, 0x7f},
    // O
    {0x00, 0x00, 0x3e, 0x7f, 0x41, 0x41, 0x7f, 0x3e},
    // P
    {0x00, 0x00, 0x7f, 0x7f, 0x09, 0x09, 0x0f, 0x06},
    // Q
    {0x00, 0x00, 0x1e, 0x3f, 0x21, 0x61, 0x7f, 0x5e},
    // R
    {0x00, 0x00, 0x7f, 0x7f, 0x19, 0x39, 0x6f, 0x46},
    // S
    {0x00, 0x00, 0x26, 0x6f, 0x49, 0x49, 0x7b, 0x32},
    // T
    {0x00, 0x00, 0x01, 0x01, 0x7f, 0x7f, 0x01, 0x01},
    // U
    {0x00, 0x00, 0x3f, 0x7f, 0x40, 0x40, 0x7f, 0x3f},
    // V
    {0x00, 0x00, 0x1f, 0x3f, 0x60, 0x60, 0x3f, 0x1f},
    // W
    {0x00, 0x00, 0x7f, 0x7f, 0x30, 0x18, 0x30, 0x7f},
    // X
    {0x00, 0x00, 0x63, 0x77, 0x1c, 0x1c, 0x77, 0x63},
    // Y
    {0x00, 0x00, 0x07, 0x0f, 0x78, 0x78, 0x0f, 0x07},
    // Z
    {0x00, 0x00, 0x61, 0x71, 0x59, 0x4d, 0x47, 0x43},
    
    // Symboles supplémentaires
    // [
    {0x00, 0x00, 0x41, 0x41, 0x7f, 0x7f, 0x00, 0x00},
    // backslash flipped
    {0x06, 0x0c, 0x18, 0x30, 0x60, 0x40, 0x00, 0x00},
    // ]
    {0x00, 0x00, 0x7f, 0x7f, 0x41, 0x41, 0x00, 0x00},
    // ^
    {0x00, 0x08, 0x04, 0x7E, 0x04, 0x08, 0x00, 0x00},
    // _
    {0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00},
    // `
    {0x00, 0x01, 0x03, 0x06, 0x04, 0x00, 0x00, 0x00},
    
    // Lettres minuscules a-z
// a
{0x00, 0x00, 0x30, 0x78, 0x48, 0x48, 0x7C, 0x7C},
// b
{0x00, 0x00, 0x7F, 0x7F, 0x44, 0x44, 0x7C, 0x38},
// c
{0x00, 0x00, 0x38, 0x7C, 0x44, 0x44, 0x6C, 0x28},
// d
{0x00, 0x00, 0x38, 0x7C, 0x44, 0x44, 0x7F, 0x7F},
// e
{0x00, 0x00, 0x38, 0x7C, 0x54, 0x54, 0x5C, 0x18},
// f
{0x00, 0x00, 0x10, 0x7E, 0x7F, 0x11, 0x03, 0x02},
// g
{0x00, 0x00, 0x98, 0xBC, 0xA4, 0xA4, 0xFC, 0x7C},
// h
{0x00, 0x00, 0x7F, 0x7F, 0x08, 0x08, 0x78, 0x70},
// i
{0x00, 0x00, 0x00, 0x48, 0x7D, 0x7D, 0x40, 0x00},
// j
{0x00, 0x00, 0x60, 0xE0, 0x80, 0x80, 0xFD, 0x7D},
// k
{0x00, 0x00, 0x7F, 0x7F, 0x18, 0x34, 0x64, 0x40},
// l
{0x00, 0x00, 0x00, 0x41, 0x7F, 0x7F, 0x40, 0x00},
// m
{0x00, 0x00, 0x7C, 0x7C, 0x18, 0x30, 0x18, 0x7C},
// n
{0x00, 0x00, 0x7C, 0x7C, 0x04, 0x04, 0x7C, 0x78},
// o
{0x00, 0x00, 0x38, 0x7C, 0x44, 0x44, 0x7C, 0x38},
// p
{0x00, 0x00, 0xFC, 0xFC, 0x24, 0x24, 0x3C, 0x18},
// q
{0x00, 0x00, 0x18, 0x3C, 0x24, 0x24, 0xFC, 0xFC},
// r
{0x00, 0x00, 0x7C, 0x7C, 0x08, 0x04, 0x0C, 0x08},
// s
{0x00, 0x00, 0x48, 0x5C, 0x54, 0x74, 0x64, 0x00},
// t
{0x00, 0x00, 0x04, 0x3F, 0x7F, 0x44, 0x64, 0x00},
// u
{0x00, 0x00, 0x3C, 0x7C, 0x40, 0x40, 0x7C, 0x7C},
// v
{0x00, 0x00, 0x1C, 0x3C, 0x60, 0x60, 0x3C, 0x1C},
// w
{0x00, 0x00, 0x3C, 0x7C, 0x30, 0x18, 0x30, 0x7C},
// x
{0x00, 0x00, 0x44, 0x6C, 0x38, 0x38, 0x6C, 0x44},
// y
{0x00, 0x00, 0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C},
// z
{0x00, 0x00, 0x44, 0x64, 0x74, 0x5C, 0x4C, 0x44}

        };

SSD1306 *_ssd1306sel;

    void SSD1306_sendCommand(SoftI2cMaster *wire, unsigned char command) {
        SoftI2cMaster_start(wire, SSD1306_I2C_ADDRESS << 1); // Adresse + bit écriture
        SoftI2cMaster_write(wire, SSD1306_COMMAND);          // Indique une commande
        SoftI2cMaster_write(wire, command);                  // Envoie la commande
        SoftI2cMaster_stop(wire);
    }

    void SSD1306_sendData(SoftI2cMaster *wire, unsigned char data) {
        SoftI2cMaster_start(wire, SSD1306_I2C_ADDRESS << 1); // Adresse + bit écriture
        SoftI2cMaster_write(wire, SSD1306_DATA);             // Indique des données
        SoftI2cMaster_write(wire, data);                     // Envoie les données
        SoftI2cMaster_stop(wire);
    }

    void SSD1306_init(SSD1306 *display, SoftI2cMaster *wire) {
        _ssd1306sel=display;
        _ssd1306sel->wire=wire;
        _ssd1306sel->clear=_SSD1306_clear;
        _ssd1306sel->setCursor=_SSD1306_setCursor;
        _ssd1306sel->print=_SSD1306_print;
        _ssd1306sel->println=_SSD1306_println;
        _ssd1306sel->printChar=_SSD1306_writeChar;
        // Initialisation de l'écran (extrait standard d'initialisation SSD1306)
        SSD1306_sendCommand(wire, 0xAE); // Écran OFF
        SSD1306_sendCommand(wire, 0xD5); SSD1306_sendCommand(wire, 0x80); // Diviseur d'horloge
        SSD1306_sendCommand(wire, 0xA8); SSD1306_sendCommand(wire, SSD1306_HEIGHT - 1); // Multiplex
        SSD1306_sendCommand(wire, 0xD3); SSD1306_sendCommand(wire, 0x00); // Décalage d'affichage
        SSD1306_sendCommand(wire, 0x40); // Ligne de départ
        SSD1306_sendCommand(wire, 0x8D); SSD1306_sendCommand(wire, 0x14); // Activer la charge de pompe
        SSD1306_sendCommand(wire, 0x20); SSD1306_sendCommand(wire, 0x00); // Mode adressage horizontal
        SSD1306_sendCommand(wire, 0xA1); // Remap colonne
        SSD1306_sendCommand(wire, 0xC8); // Sortie COM scan direction
        SSD1306_sendCommand(wire, 0xDA); SSD1306_sendCommand(wire, 0x12); // Config matérielle
        SSD1306_sendCommand(wire, 0x81); SSD1306_sendCommand(wire, 0xCF); // Contraste
        SSD1306_sendCommand(wire, 0xD9); SSD1306_sendCommand(wire, 0xF1); // Précharge
        SSD1306_sendCommand(wire, 0xDB); SSD1306_sendCommand(wire, 0x40); // Vcomh deselect
        SSD1306_sendCommand(wire, 0xA4); // Sortie normale
        SSD1306_sendCommand(wire, 0xA6); // Mode normal
        SSD1306_sendCommand(wire, 0xAF); // Écran ON
    }

    void SSD1306_clear(SoftI2cMaster *wire) {
        // Efface tout l'écran
        for (unsigned int i = 0; i < SSD1306_WIDTH * SSD1306_HEIGHT / 8; i++) {
            SSD1306_sendData(wire, 0x00);
        }
      SSD1306_setCursor(wire, 0, 0);
      cursorX = 0;
      cursorY = 0;
    }

    void SSD1306_setCursor(SoftI2cMaster *wire, unsigned char x, unsigned char y) {
        SSD1306_sendCommand(wire, 0xB0 + y);                   // Sélection de la page
        SSD1306_sendCommand(wire, 0x00 + (x & 0x0F));         // Colonne basse
        SSD1306_sendCommand(wire, 0x10 + ((x >> 4) & 0x0F));  // Colonne haute
    }

void SSD1306_print(SoftI2cMaster *wire, const char* text) {
    while (*text) {
        char c = *text++;

        // Si le caractère est un saut de ligne explicite
        if (c == '\n') {
            cursorX = 0;           // Retourne au début de la ligne
            cursorY++;             // Passe à la ligne suivante
            if (cursorY >= SSD1306_HEIGHT / 8) {
                cursorY = 0;       // Retour en haut si on dépasse l'écran
            }
            SSD1306_setCursor(wire, cursorX, cursorY);
            continue;
        }

        // Vérifie si le curseur dépasse la largeur de l'écran
        if (cursorX + 8 > SSD1306_WIDTH) {
            cursorX = 0;           // Retourne au début de la ligne
            cursorY++;             // Passe à la ligne suivante
        }

        // Vérifie si le curseur dépasse la hauteur de l'écran
        if (cursorY >= SSD1306_HEIGHT / 8) {
            cursorY = 0;           // Retourne en haut si on dépasse l'écran
        }

        // Positionne le curseur et écrit le caractère
        SSD1306_setCursor(wire, cursorX, cursorY);
        SSD1306_writeChar(wire, c);

        // Avance le curseur en X après avoir écrit le caractère
        cursorX += 8;
    }
}

void SSD1306_println(SoftI2cMaster *wire, const char* text) {
    // Appelle print pour afficher le texte
    SSD1306_print(wire, text);
    // Ajoute un saut de ligne après le texte
    SSD1306_print(wire, "\n");
}

void SSD1306_writeChar(SoftI2cMaster *wire, unsigned char c) {
        if ((c < 32) || (c > 127)) c = '?'; // Remplace les caractères non pris en charge
        unsigned char buffer[8];
        memcpy_P(buffer, font8x8[c - 32], 8); // Charge le caractère depuis PROGMEM
        for (unsigned char i = 0; i < 8; i++) {
            SSD1306_sendData(wire, buffer[i]);
        }
        SSD1306_sendData(wire, 0x00); // Espacement entre les caractères
}

// Linking
void _SSD1306_clear(void) {
  SSD1306_clear(_ssd1306sel->wire);
}
void _SSD1306_setCursor(unsigned char x, unsigned char y){
  SSD1306_setCursor(_ssd1306sel->wire, x, y);
}
void _SSD1306_print(const char* text){
  SSD1306_print(_ssd1306sel->wire,text);
}
void _SSD1306_println(const char* text){
   SSD1306_println(_ssd1306sel->wire, text);
}
void _SSD1306_writeChar(unsigned char c){
   SSD1306_writeChar(_ssd1306sel->wire, c);
}
